#include "keys_ru.h"
#include <dt-bindings/zmk/input_transform.h>
#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        cap_sen: cap_sen {
            compatible = "zmk,behavior-hold-tap";
            label = "CAP_SEN";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            hold-while-undecided;
        };

        E_Ctrl_C: E_Ctrl_C {
            compatible = "zmk,behavior-mod-morph";
            label = "E_CTRL_C";
            bindings = <&kp E>, <&kp LC(C)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        A_Ctrl_V: A_Ctrl_V {
            compatible = "zmk,behavior-mod-morph";
            label = "A_CTRL_V";
            bindings = <&kp A>, <&kp LC(V)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        I_Ctrl_X: I_Ctrl_X {
            compatible = "zmk,behavior-mod-morph";
            label = "I_CTRL_X";
            bindings = <&kp I>, <&kp LC(X)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        O_Ctrl_Z: O_Ctrl_Z {
            compatible = "zmk,behavior-mod-morph";
            label = "O_CTRL_Z";
            bindings = <&kp O>, <&kp LC(Z)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        F_Ctrl_left: F_Ctrl_left {
            compatible = "zmk,behavior-mod-morph";
            label = "F_CTRL_LEFT";
            bindings = <&kp F>, <&kp LC(LEFT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        comma_Ctrl_up: comma_Ctrl_up {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_CTRL_UP";
            bindings = <&kp COMMA>, <&kp LC(UP)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        dot_Ctrl_down: dot_Ctrl_down {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_CTRL_DOWN";
            bindings = <&kp DOT>, <&kp LC(DOWN)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        Y_Ctrl_right: Y_Ctrl_right {
            compatible = "zmk,behavior-mod-morph";
            label = "Y_CTRL_RIGHT";
            bindings = <&kp Y>, <&kp LC(RIGHT)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        U_tab: U_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "U_TAB";
            bindings = <&kp U>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT)>;
        };

        ru_ya_tab: ru_ya_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_YA_TAB";
            bindings = <&kp RU_CYRILLIC_YA>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_LALT)>;
            keep-mods = <(MOD_LCTL|MOD_LALT)>;
        };

        ru_U_che: ru_U_che {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_U_CHE";
            bindings = <&kp RU_CYRILLIC_U>, <&kp RU_CYRILLIC_CHE>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        ru_e_em: ru_e_em {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_E_EM";
            bindings = <&kp RU_CYRILLIC_IE>, <&kp RU_CYRILLIC_EM>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        ru_o_es: ru_o_es {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_O_ES";
            bindings = <&kp RU_CYRILLIC_O>, <&kp RU_CYRILLIC_ES>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        ru_a_ya: ru_a_ya {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_A_YA";
            bindings = <&kp RU_CYRILLIC_A>, <&kp RU_CYRILLIC_YA>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        ru_left: ru_left {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_LEFT";
            bindings = <&kp RU_CYRILLIC_YERU>, <&kp LC(LEFT_ARROW)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        ru_comma_up: ru_comma_up {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_COMMA_UP";
            bindings = <&kp RU_COMMA>, <&kp LC(UP)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        ru_dot_down: ru_dot_down {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_DOT_DOWN";
            bindings = <&kp RU_DOT>, <&kp LC(DOWN)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        ru_u_right: ru_u_right {
            compatible = "zmk,behavior-mod-morph";
            label = "RU_U_RIGHT";
            bindings = <&kp RU_CYRILLIC_YU>, <&kp LC(RIGHT)>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cmben {
            bindings = <&layer_en>;
            key-positions = <3 4>;
            layers = <1>;
        };

        cmbru {
            bindings = <&layer_ru>;
            key-positions = <3 4>;
            layers = <0>;
        };
    };

    macros {
        to_ru: to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N2))>;
            label = "TO_RU";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        to_en: to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(N1))>;
            label = "TO_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_en: layer_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &to_en>;
            label = "LAYER_EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        layer_ru: layer_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 1 &to_ru>;
            label = "LAYER_RU";
            tap-ms = <30>;
            wait-ms = <0>;
        };

        en: en {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_en>,
                <&macro_press>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&to_ru>;

            label = "EN";
            wait-ms = <0>;
            tap-ms = <30>;
        };

        ru: ru {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&to_ru &macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_wait_time 10>,
                <&to_en>,
                <&macro_wait_time 10>;

            label = "RU";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        en {
            bindings = <
&kp ESC   &kp DELETE  &F_Ctrl_left  &comma_Ctrl_up  &dot_Ctrl_down  &Y_Ctrl_right                                 &kp G  &kp R           &kp W     &kp C    &kp BACKSPACE  &layer_ru
&kp TAB   &U_tab      &I_Ctrl_X     &A_Ctrl_V       &E_Ctrl_C       &O_Ctrl_Z                                     &kp D  &kp T           &kp M     &kp N    &kp H          &kp Q
&kp CAPS  &kp LSHIFT  &kp X         &kp K           &kp S           &kp B                                         &kp P  &kp L           &kp V     &kp J    &kp RSHFT      &kp INS
                      &kp LWIN      &kp LALT        &kp LCTRL       &mo 2          &mt LEFT_ALT SPACE    &kp RET  &mo 3  &cap_sen 6 MB1  &kp HOME  &kp END
            >;

            display-name = "Base";
        };

        ru {
            display-name = "Ru";
            bindings = <
&kp ESC   &kp DELETE  &ru_left            &ru_comma_up               &ru_dot_down       &ru_u_right                              &kp RU_CYRILLIC_EF         &kp RU_CYRILLIC_ER  &kp RU_CYRILLIC_VE  &kp RU_CYRILLIC_EM   &kp BACKSPACE       &layer_en
&kp TAB   &ru_ya_tab  &ru_U_che           &ru_e_em                   &ru_o_es           &ru_a_ya                                 &kp RU_CYRILLIC_EL         &kp RU_CYRILLIC_EN  &kp RU_CYRILLIC_TE  &kp RU_CYRILLIC_KA   &kp RU_CYRILLIC_DE  &kp RU_CYRILLIC_IO
&kp CAPS  &kp LSHFT   &kp RU_CYRILLIC_ZE  &kp RU_CYRILLIC_SOFT_SIGN  &kp RU_CYRILLIC_I  &kp RU_CYRILLIC_E                        &kp RU_CYRILLIC_HARD_SIGN  &kp RU_CYRILLIC_ES  &kp RU_CYRILLIC_PE  &kp RU_CYRILLIC_GHE  &kp RSHFT           &kp INS
                      &kp LEFT_WIN        &kp LEFT_ALT               &kp LCTRL          &mo 2              &kp SPACE    &kp RET  &mo 4                      &cap_sen 6 MB1      &kp HOME            &kp END
            >;
        };

        nav {
            bindings = <
&trans  &trans  &kp N1  &kp N2  &kp N3  &trans                    &trans              &kp LEFT                 &kp UP               &kp DOWN               &kp RIGHT            &trans
&trans  &kp Z   &kp N4  &kp N5  &kp N6  &kp N0                    &kp RU_CYRILLIC_HA  &kp RU_CYRILLIC_BE       &kp RU_CYRILLIC_CHE  &kp RU_CYRILLIC_ZHE    &kp RU_CYRILLIC_SHA  &none
&trans  &trans  &kp N7  &kp N8  &kp N9  &trans                    &trans              &kp RU_CYRILLIC_SHORT_I  &kp RU_CYRILLIC_TSE  &kp RU_CYRILLIC_SHCHA  &trans               &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &mo 5               &trans                   &trans               &trans
            >;

            display-name = "Navigation";
        };

        sym_en {
            bindings = <
&trans  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp AT_SIGN  &kp LESS_THAN  &kp TILDE                        &kp SQT    &kp GREATER_THAN  &kp RU_UNDERSCORE  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp GRAVE
&trans  &kp SEMI        &kp LPAR          &kp DQT      &kp EXCL       &kp PLUS                         &kp MINUS  &kp QMARK         &kp EQUAL          &kp RPAR           &kp COLON        &none
&trans  &ru RU_NUMERO   &kp DOLLAR        &kp PIPE     &kp FSLH       &kp AMPERSAND                    &kp CARET  &kp RU_ASTERISK   &kp NUBS           &kp PRCNT          &kp HASH         &trans
                        &trans            &trans       &trans         &mo 5          &trans    &trans  &trans     &trans            &trans             &trans
            >;

            display-name = "Symbols";
        };

        sym_ru {
            display-name = "Symbols";
            bindings = <
&trans  &en LEFT_BRACE    &en LEFT_BRACKET         &en AT_SIGN           &en LESS_THAN       &en TILDE                        &en SQT       &kp GREATER_THAN  &kp UNDER         &en RIGHT_BRACKET         &en RIGHT_BRACE  &en GRAVE
&trans  &kp RU_SEMICOLON  &kp RU_LEFT_PARENTHESIS  &kp RU_DOUBLE_QUOTES  &kp RU_EXCLAMATION  &kp RU_PLUS                      &kp RU_MINUS  &kp RU_QUESTION   &kp RU_EQUAL      &kp RU_RIGHT_PARENTHESIS  &kp RU_COLON     &trans
&trans  &kp RU_NUMERO     &en DOLLAR               &en PIPE              &kp RU_FSLH         &en AMPERSAND                    &en CARET     &kp RU_ASTERISK   &kp RU_BACKSLASH  &kp RU_PERCENT            &en HASH         &trans
                          &trans                   &trans                &trans              &mo 5          &trans    &trans  &trans        &trans            &trans            &trans
            >;
        };

        adj {
            bindings = <
&bootloader  &none  &kp F1  &kp F2   &kp F3   &kp F4                   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_CLR
&none        &none  &kp F5  &kp F6   &kp F7   &kp F8                   &out OUT_BLE  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOL_UP  &none         &studio_unlock
&none        &none  &kp F9  &kp F10  &kp F11  &kp F12                  &out OUT_USB  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT    &none         &none
                    &none   &none    &none    &none    &none    &none  &none         &none         &none             &none
            >;

            display-name = "Adjust";
        };

        mouse {
            bindings = <
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
&trans  &mo 7   &mkp MB3  &mkp MB2  &mkp MB1  &mo 8                     &mo 8   &mkp MB1  &mkp MB2  &mkp MB3  &mo 7   &trans
&trans  &trans  &trans    &trans    &trans    &trans                    &trans  &trans    &trans    &trans    &trans  &trans
                &trans    &trans    &trans    &trans  &trans    &trans  &trans  &trans    &trans    &trans
            >;

            display-name = "Mouse";
        };

        scroll {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "Scroll";
        };

        sniper {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;

            display-name = "Sniper";
        };
    };
};

&trackball { cpi = <1000>; };

&trackball_listener {
    input-processors = <&zip_xy_scaler 9 20>;

    scroller {
        layers = <7>;
        input-processors =
            <&zip_xy_transform INPUT_TRANSFORM_Y_INVERT>,
            <&zip_xy_scaler 1 32>,
            <&zip_xy_to_scroll_mapper>;
    };

    sniper {
        layers = <8>;
        input-processors = <&zip_xy_scaler 1 4>;
    };
};
